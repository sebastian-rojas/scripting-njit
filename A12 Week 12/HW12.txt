Chapter 10 - problems 1, 2, & 3


1. Make a program that will repeatedly ask the user to guess a secret number
from 1 to 100 until the user guesses the secret number. Your program should pick
the number at random by using the magical formula int(1 + rand 100).§ When
the user guesses wrong, the program should respond, “Too high” or “Too low.” If
the user enters the word quit or exit, or if the user enters a blank line, the program
should quit. Of course, if the user guesses correctly, the program should quit then
as well!

1. Here’s one way to do it:
my $secret = int(1 + rand 100);
# This next line may be un-commented during debugging
# print "Don't tell anyone, but the secret number is $secret.\n";
while (1) {
print "Please enter a guess from 1 to 100: ";
chomp(my $guess = <STDIN>);
if ($guess =~ /quit|exit|\A\s*\z/i) {
print "Sorry you gave up. The number was $secret.\n";
last;
} elsif ($guess < $secret) {
print "Too small. Try again!\n";
} elsif ($guess == $secret) {
print "That was it!\n";
last;
} else {
print "Too large. Try again!\n";
}
}


2. Modify the program from the previous exercise to print extra debugging information
as it goes along, such as the secret number it chose. Make your change
such that you can turn it off, but your program emits no warnings if you turn it off.
If you are using Perl 5.10 or later, use the // operator. Otherwise, use the conditional
operator.


use 5.010;
my $Debug = $ENV{DEBUG} // 1;
my $secret = int(1 + rand 100);
print "Don't tell anyone, but the secret number is $secret.\n"
if $Debug;



3. Modify the program from Exercise 3 in Chapter 6 (the environment lister) to
print (undefined value) for environment variables without a value. You can set
the new environment variables in the program. Ensure that your program reports
the right thing for variables with a false value. If you are using Perl 5.10 or later,
use the // operator. Otherwise, use the conditional operator.

use 5.010;
$ENV{ZERO} = 0;
$ENV{EMPTY} = '';
$ENV{UNDEFINED} = undef;
my $longest = 0;
foreach my $key ( keys %ENV )
{
my $key_length = length( $key );
$longest = $key_length if $key_length > $longest;
}
foreach my $key ( sort keys %ENV )
{
printf "%-${longest}s %s\n", $key, $ENV{$key} // "(undefined)";
}